/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package semaphor;

import java.util.concurrent.Semaphore;

public class App {

    public static void main(String[] args) {
        System.out.println("--- Код в котором только два потока могут исполняться одновременно ---");

        // Код в котором только два потока могут исполняться одновременно
        Semaphore sem1 = new Semaphore(2);
        Philosopher philosopher = new Philosopher(sem1, "Сократ");
        Philosopher philosopher2 = new Philosopher(sem1, "Платон");
        Philosopher philosopher3 = new Philosopher(sem1, "Аристотель");
        Philosopher philosopher4 = new Philosopher(sem1, "Фалес");
        Philosopher philosopher5 = new Philosopher(sem1, "Пифагор");

        philosopher.start();
        philosopher2.start();
        philosopher3.start();
        philosopher4.start();
        philosopher5.start();
        try {
            philosopher.join();
            philosopher2.join();
            philosopher3.join();
            philosopher4.join();
            philosopher5.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("--- Код в котором все потоки могут исполняться одновременно ---");

        // Код в котором все потоки могут исполняться одновременно
        Semaphore sem2 = new Semaphore(5);
        philosopher = new Philosopher(sem2, "Сократ");
        philosopher2 = new Philosopher(sem2, "Платон");
        philosopher3 = new Philosopher(sem2, "Аристотель");
        philosopher4 = new Philosopher(sem2, "Фалес");
        philosopher5 = new Philosopher(sem2, "Пифагор");

        philosopher.start();
        philosopher2.start();
        philosopher3.start();
        philosopher4.start();
        philosopher5.start();
        try {
            philosopher.join();
            philosopher2.join();
            philosopher3.join();
            philosopher4.join();
            philosopher5.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
